<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

//Define our authorisation keys. You'll need to generate your own
imgur_dev_id = "";
twitter_consumer_key = "";
twitter_consumer_secret = "";

//Define the size of our grid-based canvas
grid_w = room_width  / 32;
grid_h = room_height / 32;

//Create a list to store each grid
lst_grids = ds_list_create();
grid_page = 0;

//Add a grid to the list
grid = ds_grid_create( grid_w, grid_h );
ds_list_add( lst_grids, grid );

//Instantly try to find images from Twitter under the "#juju_steg" hashtag
//Note the use of "%23" instead of a hash
scr_juju_steg_pull_images( "q=%23juju_steg", 10, scr_example_editor_callback, scr_example_pull_images_error, 60000, twitter_consumer_key, twitter_consumer_secret );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

//Draw on the grid
if ( mouse_check_button( mb_left ) ) {
    var xx = mouse_x div 32;
    var yy = mouse_y div 32;
    ds_grid_set( grid, xx, yy, clamp( ds_grid_get( grid, xx, yy ) + 0.2, 0, 1 ) );
}

if ( mouse_check_button( mb_right ) ) {
    var xx = mouse_x div 32;
    var yy = mouse_y div 32;
    ds_grid_set( grid, xx, yy, clamp( ds_grid_get( grid, xx, yy ) - 0.2, 0, 1 ) );
}

//Clear the grid
if ( keyboard_check_pressed( ord( "C" ) ) ) {
    ds_grid_clear( grid, 0 );
}

//Changes grids
if ( keyboard_check_pressed( vk_left ) ) {
    grid_page = clamp( grid_page - 1, 0, ds_list_size( lst_grids ) - 1 );
    grid = ds_list_find_value( lst_grids, grid_page );
}

if ( keyboard_check_pressed( vk_right ) ) {
    grid_page = clamp( grid_page + 1, 0, ds_list_size( lst_grids ) - 1 );
    grid = ds_list_find_value( lst_grids, grid_page );
}

//There's shared functionality between saving to disk (F5) and uploading to imgur (U)
if ( keyboard_check_pressed( vk_f5 ) ) or ( keyboard_check_pressed( ord( "U" ) ) ) {
    
    //Create a surface to render to. This will be used as our base image to hide data in
    var surface = surface_create( grid_w * 3, grid_h * 3 );
    
    //Create a buffer to store data. This will be hidden inside the image
    var buffer = buffer_create( grid_w * grid_h * 4, buffer_fixed, 1 );
    
    //Set our blendmode to "overwrite everything"
    draw_set_blend_mode_ext( bm_one, bm_zero );
    surface_set_target( surface );
    
    for( var yy = 0; yy &lt; grid_h; yy++ ) {
        for( var xx = 0; xx &lt; grid_w; xx++ ) {
            
            //Grab a cell value from the grid
            var value = ds_grid_get( grid, xx, yy );
            
            //Draw the cell value to the surface
            draw_set_colour( merge_colour( c_black, make_colour_hsv( irandom( 255 ), 230, 230 ), value ) );
            draw_rectangle( xx*3, yy*3, (xx+1)*3 - 1, (yy+1)*3 - 1, false );
            
            //Write the cell value to the buffer
            buffer_write( buffer, buffer_f32, value );
            
        }
    }
    
    draw_set_colour( c_white );
    surface_reset_target();
    draw_set_blend_mode( bm_normal );
    
    //Hide the buffer data inside the image
    scr_juju_steg_set( surface, buffer );
    
    if ( keyboard_check_pressed( ord( "U" ) ) ) {
        
        //If the user pressed "U", upload this image to imgur and ask the user to tweet it with a message:
        //  " Don't mind me, just testing some #juju_steg :D http://www.imgur.com/xxxxxxx "
        scr_juju_twitter_post_image( "Steganography Test", "text=Don't mind me, just testing some %23juju_steg :D", surface, noone, scr_example_post_image_error, 10000, imgur_dev_id );
        
    } else if ( keyboard_check_pressed( vk_f5 ) ) {
        
        //If F5 was pressed, save this file to disk using a random file name
        var filename = scr_safe_save( "", ".png" );
        surface_save( surface, filename );
        show_message( "Saved!" );
        
    }
    
    //Clear up our temporary data storage
    surface_free( surface );
    buffer_delete( buffer );
    
}

//Load from disk
if ( keyboard_check_pressed( vk_f9 ) ) {
    
    //Ask the user for a file
    var fname = get_open_filename( "", "" );
    
    //Attempt to load the file as a surface
    var surface = surface_load( fname );
    
    //Decode hidden data in the image
    var buffer = scr_juju_steg_get( surface );
    
    //Transfer that data onto the canvas
    buffer_seek( buffer, buffer_seek_start, 0 );
    for( var yy = 0; yy &lt; grid_h; yy++ ) {
        for( var xx = 0; xx &lt; grid_w; xx++ ) {
            ds_grid_set( grid, xx, yy, buffer_read( buffer, buffer_f32 ) );
        }
    }
    
    //Clear up our temporary data storage
    surface_free( surface );
    buffer_delete( buffer );
    
}

//Grab images from Twitter, again under the "#juju_steg" hashtag.
if ( keyboard_check_pressed( ord( "D" ) ) ) {
    scr_juju_steg_pull_images( "q=%23juju_steg", 10, scr_example_editor_callback, scr_example_pull_images_error, 20000, twitter_consumer_key, twitter_consumer_secret );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI

draw_set_colour( c_white );

str  = "Click to draw";
str += "#C - clear";
str += "#F5 - save to file";
str += "#F9 - load from file";
str += "#U - tweet pattern";
str += "#D - pull from Twitter";
str += "#left/right - choose pattern";
draw_text_outline( 5, 5, str, c_black );

str  = "Pattern " + string( grid_page + 1 ) + " of " + string( ds_list_size( lst_grids ) );
str += "##@jujuadams (June 2016)##LSB steganography#Uploading to imgur#Posting/pulling images from Twitter";
draw_set_halign( fa_right );
draw_set_valign( fa_bottom );
draw_text_outline( room_width - 5, room_height - 5, str, c_black );
draw_set_halign( fa_left );
draw_set_valign( fa_top );

if ( instance_exists( __obj_juju_twitter_post_image ) ) {
    draw_text_outline( 25, 708, "Uploading" + scr_ellipsis(), c_black );
}

if ( instance_exists( __obj_juju_twitter_pull_images ) ) {
    
    var str;
    switch( __obj_juju_twitter_pull_images.state ) {
        case enum_juju_twitter_pull_images_state.token: str = "Requesting token" break;
        case enum_juju_twitter_pull_images_state.tweets: str = "Searching tweets" break;
        case enum_juju_twitter_pull_images_state.image: str = "Downloading image " + string( __obj_juju_twitter_pull_images.image+1 ) + " of " + string( ds_list_size( __obj_juju_twitter_pull_images.lst_images ) ); break;
        default: str = "Waiting" break;
    }
    
    draw_text_outline( 25, 728, str + scr_ellipsis(), c_black );
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

for( var yy = 0; yy &lt; grid_h; yy++ ) {
    for( var xx = 0; xx &lt; grid_w; xx++ ) {
        
        var value = ds_grid_get( grid, xx, yy );
        draw_set_colour( merge_colour( c_black, c_white, value ) );
        draw_rectangle( xx*32, yy*32, (xx+1)*32 - 1, (yy+1)*32 - 1, false );
        
    }
}

draw_set_colour( c_white );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
